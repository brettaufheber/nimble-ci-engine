# Scenario S15-p — Overlapping dependencies with shared child DAG; using pipelines
# Shape: A -> (X, Y), B -> (Y, M, N -> Z)
# Expectation:
#   • A and B are roots (may run in parallel).
#   • X waits for A.
#   • Y waits for BOTH A and B.
#   • M and N wait for B; Z waits for N.
#   • With permissive slots, X/Y/M/N can overlap as allowed by the DAG.

variables:
  MAX_CONCURRENT_PIPELINES: "0"
  MAX_CONCURRENT_JOBS_PER_PIPELINE: "0"
  TEST_COMMAND: { tpl: '"\(env.TEST_DIR)/concurrency_probe.sh"' }
  INSTALL_DIR: { tpl: 'env.INSTALL_DIR' }
  CI_CONFIG_FILE: { tpl: '"\(env.TEST_RESOURCES_DIR)/ci.yaml"' }
  STATE_FILE: { tpl: 'env.STATE_FILE' }
  JQ_MODULE_PATH: { tpl: 'env.JQ_MODULE_PATH' }
  SCHEMA_BASE_URI: { tpl: 'env.SCHEMA_BASE_URI' }
  SLEEP: "0.01"
concurrency:
  max_parallel_pipelines: { tpl: '$vars.MAX_CONCURRENT_PIPELINES | tonumber' }
  max_parallel_jobs_per_pipeline: { tpl: '$vars.MAX_CONCURRENT_JOBS_PER_PIPELINE | tonumber' }
pipelines:
  - name: A
    needs: [ ]
    jobs:
      - name: A
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: B
    needs: [ ]
    jobs:
      - name: B
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: X
    needs: [ A ]
    jobs:
      - name: X
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: Y
    needs: [ A, B ]
    jobs:
      - name: Y
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: M
    needs: [ B ]
    jobs:
      - name: M
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: N
    needs: [ B ]
    jobs:
      - name: N
        steps:
          - tpl: '$vars.TEST_COMMAND'
  - name: Z
    needs: [ N ]
    jobs:
      - name: Z
        steps:
          - tpl: '$vars.TEST_COMMAND'
