# Scenario S07-j — Disjoint parallel chains as jobs in one pipeline
# Shape: (A -> B -> C), (D -> E -> F)
# Expectation:
#   • Single pipeline P1 hosts both chains.
#   • With permissive job slots, jobs from the two chains may overlap.
#   • Order inside each chain is enforced solely via job-level `needs`.

variables:
  MAX_CONCURRENT_PIPELINES: "0"
  MAX_CONCURRENT_JOBS_PER_PIPELINE: "0"
  TEST_COMMAND: { tpl: '"\(env.TEST_DIR)/concurrency_probe.sh"' }
  INSTALL_DIR: { tpl: 'env.INSTALL_DIR' }
  CI_CONFIG_FILE: { tpl: '"\(env.TEST_RESOURCES_DIR)/ci.yaml"' }
  STATE_FILE: { tpl: 'env.STATE_FILE' }
  JQ_MODULE_PATH: { tpl: 'env.JQ_MODULE_PATH' }
  SCHEMA_BASE_URI: { tpl: 'env.SCHEMA_BASE_URI' }
  SLEEP: "0.01"
concurrency:
  max_parallel_pipelines: { tpl: '$vars.MAX_CONCURRENT_PIPELINES | tonumber' }
  max_parallel_jobs_per_pipeline: { tpl: '$vars.MAX_CONCURRENT_JOBS_PER_PIPELINE | tonumber' }
pipelines:
  - name: P1
    jobs:
      - name: A
        needs: [ ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
      - name: B
        needs: [ A ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
      - name: C
        needs: [ B ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
      - name: D
        needs: [ ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
      - name: E
        needs: [ D ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
      - name: F
        needs: [ E ]
        steps:
          - tpl: '$vars.TEST_COMMAND'
